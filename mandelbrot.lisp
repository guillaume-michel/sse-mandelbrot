(in-package "MANDELBROT")

(declaim (inline %mandelbrot-iter %norm^2))
(defun %mandelbrot-iter (zr zi cr ci)
  (declare (optimize speed)
           (type f4 zr zi cr ci))
  (let* ((r (f4- (f4* zr zr)
                 (f4* zi zi)))
         (i/2 (f4* zr zi))
         (i   (f4+ i/2 i/2)))
    (values (f4+ r cr)
            (f4+ i ci))))

(defun %norm^2 (r i)
  (declare (optimize speed))
   (f4+ (f4* r r) (f4* i i)))

(declaim (maybe-inline mandelbrot-escape))
(defun mandelbrot-escape (cr ci n)
  (declare (type (simd-pack single-float) cr ci)
           (type (and unsigned-byte fixnum) n))
  (let* ((zr cr)
         (zi ci)
         (limit zr)
         (counts (%make-simd-pack-ub32 0 0 0 0)))
    (setf limit (replicate-float 4f0))
    (dotimes (i n)
      (setf (values zr zi) (%mandelbrot-iter zr zi cr ci))
      (let ((still-in-orbit (f4<= (%norm^2 zr zi) limit)))
        (setf counts (i4- counts still-in-orbit))
        (when (f4-sign-all-zero still-in-orbit)
          (return))))
    (%simd-pack-ub32s counts)))

(defun scalar-mandelbrot (c n)
  (let ((z c))
    (dotimes (i n n)
      (setf z (+ (* z z) c))
      (when (> (abs z) 2)
        (return i)))))

(defun random-test-mandelbrot (n)
  (let* ((z (complex (- (random 4.0) 2.0)
                     (- (random 4.0) 2.0)))
         (value (scalar-mandelbrot z n)))
    (flet ((almost-replicate (x)
             (%make-simd-pack-single 0.0 x x 10.0)))
      (multiple-value-bind (v1 v2 v3 v4)
          (mandelbrot-escape (almost-replicate (realpart z))
                             (almost-replicate (imagpart z))
                             n)
        (declare (ignore v1 v4))
        (assert (= value v2 v3))))))
